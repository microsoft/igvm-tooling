# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest' # Use a generic ADO pool, with the pmc-cli container

steps:
- script: |
    sudo add-apt-repository ppa:longsleep/golang-backports
    sudo apt-get update

    # Install required dependencies.
    sudo apt -y install git make tar wget curl rpm qemu-utils golang-1.20-go genisoimage python bison gawk

    # Recommended but not required: `pigz` for faster compression operations.
    sudo apt -y install pigz

    # Fix go 1.17 link
    sudo ln -vsf /usr/lib/go-1.17/bin/go /usr/bin/go

    # Install Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
  displayName: "Install Dependencies"
  
- script: |
    # test
    asdas
  displayName: "sdfdf"

- task: DownloadPipelineArtifact@2 # Download your debs/rpms from your build pipeline
  inputs:
    buildType: 'specific'
    project: 'b32aa71e-8ed2-41b2-9d77-5bc261222004' # This example is msazure/One
    definition: '0000' # use the ID that's present in the URL for your build pipeline
    buildVersionToDownload: 'latest'
    targetPath: '$(System.ArtifactsDirectory)'

- task: EsrpCodeSigning@4
  inputs:
    ConnectedServiceName: 'ESRP Code Signing Conn'
    FolderPath: 'src\myapp\$(BuildConfiguration)\Release'
    Pattern: '*.rpm,*.deb'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
      {
        "KeyCode": "CP-459159-Pgp",
        "OperationCode": "LinuxSign",
        "ToolName": "sign",
        "ToolVersion": "1.0",
        "Parameters": {}
      }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
    PendingAnalysisWaitTimeoutMinutes: '5'
