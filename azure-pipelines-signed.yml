# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- None

pool:
  vmImage: 'ubuntu-20.04' # Use a generic ADO pool, with the pmc-cli container

steps:
- script: |
    sudo add-apt-repository ppa:longsleep/golang-backports
    sudo apt-get update

    # Install required dependencies.
    sudo apt -y install git make tar wget curl rpm qemu-utils golang-1.20-go genisoimage python bison gawk

    # Recommended but not required: `pigz` for faster compression operations.
    sudo apt -y install pigz

    # Fix go 1.20 link
    sudo ln -vsf /usr/lib/go-1.20/bin/go /usr/bin/go

    # Install Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
  displayName: "Install Dependencies"
  
- script: |
    git clone https://github.com/microsoft/CBL-Mariner.git
    pushd CBL-Mariner/toolkit
    git checkout 2.0-stable
    sudo make package-toolkit REBUILD_TOOLS=y
    popd
  displayName: 'Clone CBL-Mariner and build toolkit'

- script: |
    git clone https://github.com/microsoft/CBL-MarinerTutorials.git
    pushd CBL-MarinerTutorials
    cp ../CBL-Mariner/out/toolkit-*.tar.gz ./
    tar -xzvf toolkit-*.tar.gz
  displayName: 'Clone CBL-MarinerTutorials and copy toolkit built from previous step'

- task: EsrpCodeSigning@4
  inputs:
    ConnectedServiceName: 'ESRP Code Signing Conn'
    FolderPath: '$(System.ArtifactsDirectory)'
    Pattern: '*.rpm,*.deb'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
      {
        "KeyCode": "CP-459159-Pgp",
        "OperationCode": "LinuxSign",
        "ToolName": "sign",
        "ToolVersion": "1.0",
        "Parameters": {}
      }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
    PendingAnalysisWaitTimeoutMinutes: '5'
